{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ron\\\\Desktop\\\\Master\\\\Coding\\\\Projects\\\\School-Board\\\\gradebookfrontend\\\\gradebookfrontend\\\\src\\\\pages\\\\teacheradminpage\\\\createassignmentspage.jsx\",\n  _s = $RefreshSig$();\nimport { EditAssignment } from '../../components/editableassignment/editassignment';\nimport { useParams } from 'react-router-dom';\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Admin() {\n  _s();\n  const {\n    classname\n  } = useParams();\n  const {\n    class_id\n  } = useParams();\n  const studentName = useRef();\n  let assignmentName = useRef();\n  let assignmentStatus = useRef();\n  let grade = useRef();\n  let [assignments, setAssignments] = useState([]);\n  let [studentNames, setNames] = useState([]);\n  let [currentName, setCurrentName] = useState(\"\");\n  async function createAssignment(e) {\n    e.preventDefault();\n    if (currentName !== \"\") {\n      const response = await fetch('http://127.0.0.1:8000/addassignment/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          assignment_name: assignmentName.current.value,\n          student_name: currentName,\n          class_name: classname,\n          assignment_status: assignmentStatus.current.value,\n          grade: grade.current.value\n        })\n      });\n      const json = await response.json();\n      alert(json.message);\n      if (json.message === 'Assignment Added!') {\n        window.location.reload();\n      }\n    } else {\n      alert(\"No Student Selected!\");\n    }\n  }\n  async function getStudentsFromClassName() {\n    let names = [];\n    const response = await fetch('http://127.0.0.1:8000/getstudents/?' + new URLSearchParams({\n      class_id: class_id\n    }));\n    const json = await response.json();\n    for (let i = 0; i < json.data.length; i++) {\n      let name = json.data[i].name + \" \" + json.data[i].last_name;\n      names.push(name);\n    }\n    setNames(names);\n  }\n  async function fetchAssignments() {\n    const response = await fetch('http://127.0.0.1:8000/getassignments/?' + new URLSearchParams({\n      classname: classname,\n      studentname: studentName.current.value\n    }));\n    const json = await response.json();\n    let assignmentList = [];\n    if (json.data.length !== 0) {\n      json.data.map(data => {\n        assignmentList.push(data);\n      });\n    }\n    setAssignments(assignmentList);\n    setCurrentName(studentName.current.value);\n  }\n  useEffect(() => {\n    getStudentsFromClassName();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [classname, \" Class\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      ref: studentName,\n      children: studentNames.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: name\n      }, name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 43\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchAssignments,\n      children: \"Get Assignments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [assignments.map(assignment => /*#__PURE__*/_jsxDEV(EditAssignment, {\n        assignmentname: assignment.assignment_name,\n        studentname: currentName,\n        classname: classname,\n        status: assignment.assignment_status,\n        grade: assignment.grade\n      }, assignment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 51\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: createAssignment,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Add Assignments For \", currentName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter Assignment Name...\",\n        ref: assignmentName,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter Assignment Status...\",\n        ref: assignmentStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter Grade...\",\n        ref: grade,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(Admin, \"rdbq/YZISCgQ1w5gef0V30U34d0=\", false, function () {\n  return [useParams, useParams];\n});\n_c = Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["EditAssignment","useParams","React","useRef","useState","useEffect","Admin","classname","class_id","studentName","assignmentName","assignmentStatus","grade","assignments","setAssignments","studentNames","setNames","currentName","setCurrentName","createAssignment","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","assignment_name","current","value","student_name","class_name","assignment_status","json","alert","message","window","location","reload","getStudentsFromClassName","names","URLSearchParams","i","data","length","name","last_name","push","fetchAssignments","studentname","assignmentList","map","assignment","id"],"sources":["C:/Users/Ron/Desktop/Master/Coding/Projects/School-Board/gradebookfrontend/gradebookfrontend/src/pages/teacheradminpage/createassignmentspage.jsx"],"sourcesContent":["import { EditAssignment } from '../../components/editableassignment/editassignment';\r\nimport { useParams } from 'react-router-dom';\r\nimport React, { useRef, useState, useEffect } from 'react';\r\n\r\nexport function Admin() {\r\n    const { classname } = useParams();\r\n    const { class_id } = useParams();\r\n    const studentName = useRef();\r\n    let assignmentName = useRef();\r\n    let assignmentStatus = useRef();\r\n    let grade = useRef();\r\n    let [assignments, setAssignments] = useState([]);\r\n    let [studentNames, setNames] = useState([]);\r\n    let [currentName, setCurrentName] = useState(\"\");\r\n\r\n    async function createAssignment(e){\r\n        e.preventDefault();\r\n\r\n        if(currentName !== \"\"){\r\n            const response = await fetch('http://127.0.0.1:8000/addassignment/', { \r\n                method: 'POST',\r\n                headers: { \r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body:JSON.stringify({ \r\n                    assignment_name: assignmentName.current.value,\r\n                    student_name: currentName,\r\n                    class_name: classname,\r\n                    assignment_status: assignmentStatus.current.value,\r\n                    grade: grade.current.value\r\n                })\r\n            });\r\n    \r\n            const json = await response.json();\r\n    \r\n            alert(json.message);\r\n    \r\n            if(json.message === 'Assignment Added!'){\r\n                window.location.reload();\r\n            }\r\n        }\r\n        else{\r\n            alert(\"No Student Selected!\");\r\n        }\r\n    }\r\n\r\n    async function getStudentsFromClassName(){\r\n        let names = [];\r\n\r\n        const response = await fetch('http://127.0.0.1:8000/getstudents/?' + new URLSearchParams({\r\n            class_id: class_id,\r\n        }));\r\n        \r\n        const json = await response.json();\r\n\r\n        for(let i = 0; i < json.data.length; i++){\r\n            let name = json.data[i].name + \" \" + json.data[i].last_name;\r\n            names.push(name);\r\n        }\r\n        setNames(names);\r\n    }\r\n    \r\n    async function fetchAssignments(){\r\n        const response = await fetch('http://127.0.0.1:8000/getassignments/?' + new URLSearchParams({\r\n            classname: classname,\r\n            studentname: studentName.current.value\r\n        }));\r\n\r\n        const json = await response.json();\r\n        \r\n        let assignmentList = [];\r\n        \r\n        if(json.data.length !== 0) {\r\n            json.data.map(data => {\r\n                assignmentList.push(data);\r\n            });\r\n        }\r\n\r\n        setAssignments(assignmentList);\r\n        setCurrentName(studentName.current.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStudentsFromClassName();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>{ classname } Class</h1>\r\n            <select ref={ studentName }>\r\n                {studentNames.map(name => <option key={ name }>{ name }</option>)}\r\n            </select>\r\n            <button onClick={ fetchAssignments }>Get Assignments</button>\r\n\r\n            <div>\r\n                {\r\n                    assignments.map(assignment => <EditAssignment \r\n                        key={ assignment.id } \r\n                        assignmentname={ assignment.assignment_name } \r\n                        studentname={ currentName } \r\n                        classname={ classname }\r\n                        status={ assignment.assignment_status } \r\n                        grade={ assignment.grade }\r\n                        />\r\n                        )\r\n                    }\r\n                        <div>\r\n                        </div>\r\n            </div>\r\n\r\n            <form onSubmit={ createAssignment }>\r\n                <h2>Add Assignments For { currentName }</h2>\r\n                <input placeholder=\"Enter Assignment Name...\" ref={ assignmentName } required/>\r\n                <input placeholder=\"Enter Assignment Status...\" ref={ assignmentStatus }/>\r\n                <input placeholder=\"Enter Grade...\" ref={ grade } required/>\r\n                <button type=\"submit\">Create</button>\r\n            </form>\r\n        </div>\r\n    );\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}